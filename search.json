[{"path":"https://ncezid-biome.github.io/source-attribution-MLST/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lee Katz. Author, maintainer. Zhaohui Cui. Author. Sean Browning. Author.","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Katz L, Cui Z, Browning S (2024). sourcerer: Predicts Food Source MLST Profile. R package version 0.1.0, https://ncezid-biome.github.io/source-attribution-MLST.","code":"@Manual{,   title = {sourcerer: Predicts Food Source from an MLST Profile},   author = {Lee Katz and Zhaohui Cui and Sean Browning},   year = {2024},   note = {R package version 0.1.0},   url = {https://ncezid-biome.github.io/source-attribution-MLST}, }"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"source-attribution-mlst","dir":"","previous_headings":"","what":"Predicts Food Source from an MLST Profile","title":"Predicts Food Source from an MLST Profile","text":"repo describes source attributions project Enterics Diseases Epidemiology Branch (EDEB) Enteric Diseases Laboratory Branch (EDLB) Division Foodborne, Waterborne, Environmental Diseases CDC. manuscript can found https://doi.org/10.1089/fpd.2023.0046.","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predicts Food Source from an MLST Profile","text":"Requires R devtools install executable scripts, locate installed, e.g., $HOME/R/4/3.2/sourcerer, update PATH. Linux, looks like :","code":"devtools::install_github(\"ncezid-biome/source-attribution-MLST\") # Find the installation find ~ -type d -name sourcerer # => assume the path is $HOME/R/4/3.2/sourcerer for this example export PATH=$PATH:$HOME/R/4/3.2/sourcerer/exec # Double check the installation with the which command which bootstrapRF.R which predictRF.R"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Predicts Food Source from an MLST Profile","text":"can use package either executable Rscripts via API. Either way, first, create model models bootstrapping() Rscript bootstrapRF.R. , query model prediction() Rscript predictRF.R. Creating model done “bootstrap” represents one outcome stochatic outcomes random forest model. Therefore, usage create many models run prediction many models get aggregated outcome.","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"examples-with-api","dir":"","previous_headings":"Usage","what":"Examples with API","title":"Predicts Food Source from an MLST Profile","text":"","code":"library(\"sourcerer\")  # Command line argument parsing option_list <- list(     make_option(c(\"-i\", \"--input\"), type = \"character\", help = \"Spreadsheet describing MLST profiles, in csv or csv.gz format.\"),     make_option(c(\"-o\", \"--output\"), type = \"character\", help = \"Directory of bootstrap random forest models to output\", default = \"results\"),     make_option(c(\"-d\", \"--dependent\"), type = \"character\", help = \"The dependent variable in the spreadsheet. Default:food\", default = \"food\"),     make_option(c(\"-c\", \"--core-loci\"), type = \"character\", help = \"A comma-separated list of core loci to help remove duplicate isolates. These loci must be present as headers in the spreadsheet from --input.\"),     make_option(c(\"\", \"--starts-with\"), type = \"character\", help = \"The prefix of all independent variables. Default:LMO\", default = \"LMO\"),     make_option(c(\"\", \"--seed\"), type = \"integer\", help = \"Random seed. Default:23\", default = 23),     make_option(c(\"-b\", \"--bootstraps\"), type = \"integer\", help = \"How many random forest bootstraps to output\", default = 1),     make_option(c(\"-t\", \"--threads\"), type = \"integer\", help = \"How many cores to use. Default:1\", default = 1) ) opt_parser <- OptionParser(option_list = option_list) opt <- parse_args(opt_parser)  # required options required_options <- c(\"input\", \"output\", \"core-loci\") for (o in required_options) {   if (!(o %in% names(opt))) {     cat(\"ERROR: Required option\", o, \"is missing.\\n\")     print_help(opt_parser)     q(status = 1)   } }  # On second thought, get 10 bootstraps instead of the default of 1 opt$bootstraps <- 10  # Slow RF modeling step rf_filenames <- bootstrapping(opt)   # Start on the prediction step option_list <- list(     make_option(c(\"-m\", \"--model\"), type = \"character\", help = \"A single random forest model RDS file\"),     make_option(c(\"-q\", \"--query\"), type = \"character\", help = \"A CSV file with two rows: a header and values for an MLST profile. The header should only have columns with relevant loci and not even an identifier for the genome.\"),     make_option(c(\"-t\", \"--threads\"), type = \"integer\", help = \"How many cores to use. Default: 1\", default = 1) ) opt_parser <- OptionParser(option_list = option_list) opt <- parse_args(opt_parser)  # Change the model filenames to the ones you already have opt$model <- rf_filenames  # required options required_options <- c(\"model\", \"query\") for (o in required_options) {   if (!(o %in% names(opt))) {     cat(\"ERROR: Required option\", o, \"is missing.\\n\")     print_help(opt_parser)     q(status = 1)   } }  pred <- prediction(opt)  # Print the first prediction table write.table(pred[[1]]$predicted,             file = stdout(),             sep  = \"\\t\",             quote = FALSE,             row.names = FALSE,             col.names = TRUE )"},{"path":[]},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"basic-example","dir":"","previous_headings":"Usage > Examples with executable scripts","what":"Basic example","title":"Predicts Food Source from an MLST Profile","text":"example, make one random forest model results/bs23.rds, query provided example MLST profile data/example_query.csv. bootstraps requested 1, files results/. random forest number given bootstrap number file name, random seed used. Seeds incremented 1 bootstraps requested.","code":"Rscript scripts/bootstrapRF.R --input data/isolates_original_plus_new_dec_1_2021.csv.gz -o results --dependent food --core-loci data/cgMLST_loci.csv --starts-with LMO --bootstraps 1 --threads 8 --seed 23 Rscript scripts/predictRF.R --query data/example_query.csv -m results/bs23.rds --threads 1"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"parallelized-model-creation","dir":"","previous_headings":"Usage > Examples with executable scripts","what":"Parallelized model creation","title":"Predicts Food Source from an MLST Profile","text":"can use --threads use multiple cores underlying libraries. However, can let operating system parallelize calls many models create. Using exact method, call 4 random seeds shuf parallelize xargs using 4 processors. seed transferred program --seed. request 10 models using --bootstraps therefore getting 4 x 10 = 40 models. Formally, possible seeds close enough output models override . can try avoid increasing range shuf creating one-models fill gaps.","code":"shuf -i 1-9999 -n 4 | \\   xargs -n 1 -P 4 bash -c '     Rscript scripts/bootstrapRF.R --input data/isolates_original_plus_new_dec_1_2021.csv.gz -o results/LMO0003 --dependent food --core-loci data/cgMLST_loci.csv --starts-with LMO0003 --bootstraps 10 --threads 1 --seed $0   '"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"parallelized-predicting","dir":"","previous_headings":"Usage > Examples with executable scripts","what":"Parallelized predicting","title":"Predicts Food Source from an MLST Profile","text":"method reads rds model files created sends xargs. model give prediction tab-delimited format. end optional step, suggest using column -t aligns columns terminal.","code":"\\ls results/LMO0003/*.rds | \\   xargs -n 1 -P 8 bash -c '     Rscript scripts/predictRF.R --query data/example_query.csv -m $0 --threads 1   ' | \\   column -t"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"complete-usage","dir":"","previous_headings":"Usage","what":"Complete usage","title":"Predicts Food Source from an MLST Profile","text":"","code":"Usage: scripts/bootstrapRF.R [options]   Options:         -i INPUT, --input=INPUT                 Spreadsheet describing MLST profiles, in csv or csv.gz format.          -o OUTPUT, --output=OUTPUT                 Directory of bootstrap random forest models to output          -d DEPENDENT, --dependent=DEPENDENT                 The dependent variable in the spreadsheet. Default:food          -c CORE-LOCI, --core-loci=CORE-LOCI                 A comma-separated list of core loci to help remove duplicate isolates. These loci must be present as headers in the spreadsheet from --input.          --starts-with=STARTS-WITH                 The prefix of all independent variables. Default:LMO          --seed=SEED                 Random seed. Default:23          -b BOOTSTRAPS, --bootstraps=BOOTSTRAPS                 How many random forest bootstraps to output          -t THREADS, --threads=THREADS                 How many cores to use. Default:1          -h, --help                 Show this help message and exit Usage: scripts/predictRF.R [options]   Options:         -m MODEL, --model=MODEL                 A single random forest model RDS file          -q QUERY, --query=QUERY                 A CSV file with two rows: a header and values for an MLST profile. The header should only have columns with relevant loci and not even an identifier for the genome.          -t THREADS, --threads=THREADS                 How many cores to use. Default: 1          -h, --help                 Show this help message and exit"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/index.html","id":"aggregating-the-data","dir":"","previous_headings":"","what":"Aggregating the data","title":"Predicts Food Source from an MLST Profile","text":"given query, random forest model can yield different outcome. Therefore, need aggregate results across bootstraps. one method example finds mean category command line.","code":"\\ls tests/testthat/test-results/*.rds | xargs -n 1 -P 1 Rscript exec/predictRF.R --query data/example_query.csv --threads 4 --model | grep -v dairy | datamash mean 1 mean 2 mean 3 mean 4 mean 5 | column -t ℹ Loading sourcerer ℹ Loading sourcerer ℹ Loading sourcerer INFO [2024-01-24 14:19:38] Running with 4 cores. INFO [2024-01-24 14:19:38] Will read model: tests/testthat/test-results/bs23.rds INFO [2024-01-24 14:19:38] Running with 4 cores. INFO [2024-01-24 14:19:38] Will read model: tests/testthat/test-results/bs24.rds INFO [2024-01-24 14:19:38] Running with 4 cores. INFO [2024-01-24 14:19:38] Will read model: tests/testthat/test-results/bs25.rds 0.15012679321561  0.15789806734794  0.31114043339838  0.16977994687198  0.21105475916609"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/bootstrapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping — bootstrapping","title":"Bootstrapping — bootstrapping","text":"Bootstrapping","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/bootstrapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping — bootstrapping","text":"","code":"bootstrapping(   input,   output,   core_loci,   dependent = \"food\",   starts_with = \"LMO\",   seed = 23,   bootstraps = 1,   ncores = 1L )"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/bootstrapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping — bootstrapping","text":"input (character) spreadsheet describing MLST profiles, csv csv.gz format. output (character) Output folder bootstrap random forest models core_loci (character) comma-separated list core loci help remove duplicate isolates. loci must present headers spreadsheet input. dependent (character, default \"food\") dependent variable input starts_with (character, Default: \"LMO\") prefix independent variables. seed (numeric, default: 23) Random seed bootstraps (numeric, default: 1) many random forest bootstrap models output ncores (integer, default: 1) many cores use. Default:1","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/bootstrapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping — bootstrapping","text":"my_filenames list random forest filenames","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/bootstrapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping — bootstrapping","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found See [inst/bootstrapRF.R] #> Error in eval(expr, envir, enclos): object 'See' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/cal_conf_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"cal_conf_attr — cal_conf_attr","title":"cal_conf_attr — cal_conf_attr","text":"cal_conf_attr","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/cal_conf_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cal_conf_attr — cal_conf_attr","text":"","code":"cal_conf_attr(n.rep, pred, train = NULL)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/cal_conf_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cal_conf_attr — cal_conf_attr","text":"n.rep  pred  train","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/cal_conf_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cal_conf_attr — cal_conf_attr","text":"idea","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/cal_conf_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cal_conf_attr — cal_conf_attr","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/plot_panel_pred_prob_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","title":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","text":"plot_panel_pred_prob_ind","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/plot_panel_pred_prob_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","text":"","code":"plot_panel_pred_prob_ind(pred, train = NULL)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/plot_panel_pred_prob_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","text":"pred  train","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/plot_panel_pred_prob_ind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","text":"list(p=p)","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/plot_panel_pred_prob_ind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_panel_pred_prob_ind — plot_panel_pred_prob_ind","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction — prediction","title":"Prediction — prediction","text":"Prediction","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction — prediction","text":"","code":"prediction(query, model, ncores = 1L)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction — prediction","text":"query (character) CSV file two rows: header values MLST profile. header columns relevant loci even identifier genome. model (character) Path single random forest model RDS file ncores (integer, default: 1L) Number cores use random forest fit","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction — prediction","text":"prediction prediction object predict.rfsrc()","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction — prediction","text":"","code":"See [inst/bootstrapRF.R] #> Error in eval(expr, envir, enclos): object 'See' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sel_rep_iso.html","id":null,"dir":"Reference","previous_headings":"","what":"sel_rep_iso — sel_rep_iso","title":"sel_rep_iso — sel_rep_iso","text":"sel_rep_iso","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sel_rep_iso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sel_rep_iso — sel_rep_iso","text":"","code":"sel_rep_iso(dat, ht, cgmlst_loci)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sel_rep_iso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sel_rep_iso — sel_rep_iso","text":"dat  ht  cgmlst_loci","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sel_rep_iso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sel_rep_iso — sel_rep_iso","text":"cluster.id","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sel_rep_iso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sel_rep_iso — sel_rep_iso","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sen_spe.html","id":null,"dir":"Reference","previous_headings":"","what":"sen_spe — sen_spe","title":"sen_spe — sen_spe","text":"sen_spe","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sen_spe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sen_spe — sen_spe","text":"","code":"sen_spe(pred, obs)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sen_spe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sen_spe — sen_spe","text":"pred  obs","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sen_spe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sen_spe — sen_spe","text":"large list","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/sen_spe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sen_spe — sen_spe","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/seq.rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"seq.rfsrc — seq.rfsrc","title":"seq.rfsrc — seq.rfsrc","text":"seq.rfsrc","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/seq.rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seq.rfsrc — seq.rfsrc","text":"","code":"# S3 method for rfsrc seq(dat, imp, my.seq, ntree)"},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/seq.rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seq.rfsrc — seq.rfsrc","text":"dat  imp  .seq  ntree","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/seq.rfsrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"seq.rfsrc — seq.rfsrc","text":"list(res = dat)","code":""},{"path":"https://ncezid-biome.github.io/source-attribution-MLST/reference/seq.rfsrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seq.rfsrc — seq.rfsrc","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"}]
